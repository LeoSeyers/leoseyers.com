@mixin respond($breakpoint) {

   @if $breakpoint==phone-medium {
     @media only screen and (min-width: 23.4em) {
       @content
     };
   }

    @if $breakpoint==phone-large {
      @media only screen and (min-width: 25.625em) {
        @content
      };
    }

  @if $breakpoint==tab {
    @media only screen and (min-width: 37.5em) {
      @content
    };
  }

  @if $breakpoint==tab-large {
    @media only screen and (min-width: 56.25em) {
      @content
    };
  }

  @if $breakpoint==desktop {
    @media only screen and (min-width: 75em) {
      @content
    };
  }

  @if $breakpoint==desktop-large {
    @media only screen and (min-width: 112.5em) {
      @content
    };
  }

  @if $breakpoint==desktop-xlarge {
    @media only screen and (min-width: 137.5em) {
      @content
    };
  }

}

@mixin max-width($breakpoint) {
  @if $breakpoint==tab {
    @media only screen and (max-width: 37.5em) {
      @content
    };
  }

  @if $breakpoint==tab-large {
    @media only screen and (max-width: 56.25em) {
      @content
    };
  }

  @if $breakpoint==desktop {
    @media only screen and (max-width: 75em) {
      @content
    };
  }
}



@mixin font-size($size) {

  @if $size==s {
    font-size: 1rem;
    line-height: 160%;
    // @include respond(tab-large) {
    //   font-size: 1rem;
    // }
  }

  @if $size==m {
    font-size: 1.25rem;
    line-height: 160%;
    // @include respond(tab-large) {
    //   font-size: 1.25rem;
    // }
  }

  @if $size==l {
    font-size: 1.625rem;
    line-height: 160%;
    // @include respond(tab-large) {
    //   font-size: 1.625rem;
    // }
  }

  @if $size==xl {
    font-size: 2rem;
    line-height: 160%;
    @include respond(tab-large) {
      font-size: 2.5rem;
    }
  }

}


@mixin aspect-ratio($arglist...

  /*$ratio or $width, $height*/
) {
  $map: keywords($arglist);
  $height: map-get($map, height) or nth-value($arglist, 2);
  $width: map-get($map, width) or nth-value($arglist, 1);
  $ratio: map-get($map, ratio) or if($width and $height, $width/$height, nth-value($arglist, 1)) or 1;
  $padding: 1/$ratio * 100%;

  &::before,
  &::after {
    content: '';
    display: table;
    clear: both;
    width: 1px;
    margin-left: -1px;
  }

  &::before {
    float: left;
    padding-bottom: $padding;
  }
}

// Helper function 
// Return null rather than throwing an error if index is outside list range.    
@function nth-value($list, $index) {
  @return if(length($list) >=$index, nth($list, $index), null);
}

